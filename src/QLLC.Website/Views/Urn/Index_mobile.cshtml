@{
    ViewData["Title"] = "Danh sách linh cốt";
}
<style>
    .image-preview {
        height: 100px;
        width: 100px;
        object-fit: contain;
    }

    .k-form-buttons {
        /*   position: absolute;
                                bottom: 0;
                                right: 0; */
        padding-right: 12px;
        padding-bottom: 12px;
    }


    .k-toolbar .k-input{
        width: 100%;
    }
</style>
<div>

    <h4 class="demo-section wide title">@ViewData["Title"]</h4>
    <div id="divContent">
        <div id="gridId" class="" style="overflow:auto;">
        </div>
    </div>
    <div id="window"></div>
    <div id="dialog"></div>
</div>
<script type="text/javascript">
    let gridId = "#gridId";
    // if (isMobile.any()) alert("Mobile");
    var genderDatasource = @Html.Raw(Json.Serialize(@ViewBag.GenderDatasource));
    var urnTypeDatasource = @Html.Raw(Json.Serialize(@ViewBag.UrnTypeDatasource));

    function renderCreateOrEditForm(isCreate = true, dataUrn = {}) {
        let myWindow = $("#window");
        $("#window").html("<form id='formCreateAndEdit'></form>");

        let formData = {
            id: 0,
            tenantId: 0,
            name: "",
            dharmaName: "",
            birthDate: null,
            deathDate: null,
            gender: "",
            urnType: "",
            note: "",
            towerLocation: "",
            cabinetName: "",
            rowNumber: 0,
            boxNumber: 0,
            expiredDate: null,
            fileImageUrl: "",
            ...dataUrn
        };
        let strSubmit = "Thêm";
        let title = "THÊM MỚI"
        let element;
        if (isCreate == false) {
            strSubmit = "Sửa";
            title = "CẬP NHẬT";
        }
        var formDom = $("#formCreateAndEdit");
        var form = formDom.kendoForm({
            orientation: "vertical",
            formData: formData,
            type: "group",
            layout: "grid",
            grid: {
                cols: 2,
                gutter: 20
            },
            items: [
                {
                    type: "group",
                    label: "Thông tin linh cốt",
                    layout: "grid",
                    grid: { cols: 2, gutter: 10 },
                    items: [
                        {
                            field: "name",
                            title: "Họ tên",
                            label: "Họ tên (*):",
                            colSpan: 2,
                            validation: {
                                // validationMessage: "Vui lòng nhập họ tên",
                                required: true
                            },
                        },
                        {
                            field: "dharmaName",
                            title: "Pháp danh",
                            label: "Pháp danh:",
                            colSpan: 2,
                        },
                        {
                            field: "birthDate",
                            editor: "DatePicker",
                            label: "Ngày sinh (Ngày âm)(*):",
                            title: "Ngày sinh (Ngày âm)",
                            colSpan: 1,
                            validation: {
                                required: true
                            },
                        },
                        {
                            field: "deathDate",
                            editor: "DatePicker",
                            label: "Ngày mất (Ngày âm)(*):",
                            title: "Ngày mất (Ngày âm)",
                            colSpan: 1,
                            validation: {
                                required: true
                            },
                        },
                        {
                            field: "gender",
                            editor: "DropDownList",
                            label: "Giới tính (*):",
                            title: "Giới tính",
                            colSpan: 2,
                            validation: {
                                validationMessage: "Vui lòng chọn giới tính",
                                required: true
                            },
                            editorOptions: {
                                optionLabel: "Chọn giới tính",
                                dataTextField: "text",
                                dataValueField: "value",
                                filter: "contains",
                                dataSource: genderDatasource,
                            }
                        },
                        {
                            field: "urnType",
                            editor: "DropDownList",
                            label: "Linh hoặc Cốt (*):",
                            title: "Linh hoặc Cốt",
                            colSpan: 2,
                            validation: {
                                validationMessage: "Vui lòng chọn Linh hoặc Cốt",
                                required: true
                            },
                            editorOptions: {
                                optionLabel: "Chọn Linh hoặc Cốt",
                                dataTextField: "text",
                                dataValueField: "value",
                                filter: "contains",
                                dataSource: urnTypeDatasource,
                            }
                        },
                        {
                            field: "familyMemberIdList",
                            editor: "MultiSelect",
                            label: "Người ký gửi (*):",
                            colSpan: 2,
                            editorOptions: {
                                optionLabel: "Chọn người ký gửi",
                                dataTextField: "text",
                                dataValueField: "value",
                                filter: "contains",
                                tagMode: "single",
                                messages: {
                                    singleTag: "người được chọn",
                                },
                                dataSource: {
                                    type: "json",
                                    serverFiltering: true,
                                    transport: {
                                        read: {
                                            url: "/User/GetUserDropdownList",
                                            dataType: "json",
                                            data: function () {
                                                return {
                                                    searchString: $("#familyMemberIdList").data("kendoMultiSelect").input.val(), // The search string.
                                                    selectedIdList: formData.familyMemberIdList?.join(",")
                                                };
                                            }
                                        }
                                    },
                                    schema: {
                                        type: 'json',
                                        data: "data",
                                    },

                                }
                            }
                        },
                        {
                            field: "note",
                            title: "Ghi chú:",
                            label: "Ghi chú:",
                            editor: "TextArea",
                            colSpan: 2,
                            editorOptions: { rows: 3 },
                        },
                    ]
                },
                {
                    type: "group",
                    label: "Thông tin vị trí",
                    layout: "grid",
                    grid: { cols: 2, gutter: 10 },
                    items: [
                        {
                            field: "towerLocation",
                            title: "Vị trí tháp",
                            label: "Vị trí tháp (*):",
                            editor: "TextBox",
                            colSpan: 2,
                            validation: {
                                validationMessage: "Vui lòng nhập vị trí tháp",
                                required: true
                            },
                        },
                        {
                            field: "cabinetName",
                            title: "Tên tủ",
                            label: "Tên tủ (*):",
                            editor: "TextBox",
                            colSpan: 2,
                            validation: {
                                validationMessage: "Vui lòng nhập tên tủ",
                                required: true
                            },
                        },
                        {
                            field: "rowNumber",
                            label: "Số hàng (*):",
                            title: "Số hàng",
                            editor: "NumericTextBox",
                            editorOptions: {
                                min: 0,  // Minimum value
                                max: 10000, // Maximum value
                                format: "n0", // Format as an integer
                                decimals: 0, // No decimals allowed
                            },
                            validation: {
                                required: true
                            }
                        },
                        {
                            field: "boxNumber",
                            label: "Ô số (*):",
                            title: "Ô số",
                            editor: "NumericTextBox",
                            editorOptions: {
                                min: 0,  // Minimum value
                                max: 10000, // Maximum value
                                format: "n0", // Format as an integer
                                decimals: 0, // No decimals allowed
                            },
                            validation: {
                                required: true
                            }
                        },
                        {
                            field: "expiredDate",
                            editor: "DatePicker",
                            label: "Hạn ký gửi (*):",
                            title: "Hạn ký gửi",
                            colSpan: 2,
                            validation: {
                                // validationMessage: "Vui lòng nhập ngày hạn ký gửi",
                                required: true
                            },
                            // editorOptions: {
                            //     dateInput: true,
                            //     min: new Date(1900, 0, 1),
                            //     max: new Date(2099, 11, 31),
                            // }
                        },
                        {
                            field: "fileImageUrl",
                            label: {
                                text: "Hình ảnh",
                                encoded: false
                            },
                            colSpan: 2,
                            editor: function (container, options) {//accept="image/*"
                                $('<input type="file" accept="image/png, image/gif, image/jpeg, image/jpg, image/bmp" name="file" id="file" />').appendTo(container)
                                    .kendoUpload({
                                        validation: {
                                            allowedExtensions: [".png", ".jpg", ".jpeg", ".bmp", ".svg"],
                                        },
                                        localization: {
                                            select: "Tải lên hình ảnh",
                                            dropFilesHere: "<span class='k-icon k-i-upload k-button-icon' style='margin-right: 10px;'></span>",
                                            encoded: false
                                        },
                                        multiple: false,
                                        async: {
                                            saveUrl: "/File/UploadFile",
                                            autoUpload: false
                                        },
                                        select: function (e) {
                                            var fileList = e.files;
                                            var wrapper = this.wrapper;

                                            fileList.forEach(function (file) {
                                                setTimeout(function () {
                                                    addPreview(file, wrapper);
                                                });
                                            });
                                        },
                                        success: function (e) {
                                            if (e.response.isSuccess == true) {
                                                $("#formCreateAndEdit").getKendoForm().editable.options.model.set("fileImageUrl", e.response.data.path);
                                            }
                                        }
                                    });
                                $(".k-dropzone").css({ "padding": "0" });
                            },
                        },


                    ]
                },
            ],
            messages: {
                submit: strSubmit, clear: "Đặt lại"
            },
            close: function (e) {
                $(this.element).empty();
            },
        }).getKendoForm();


        formDom.kendoValidator({
            messages: {
                validBirthDate: "Ngày sinh không đúng định dạng",
                validDeathDate: "Ngày mất không đúng định dạng",
                validExpiredDate: "Ngày hạn ký gửi không đúng định dạng",
                validRow: "Số hàng ô phải lớn hơn 0",
                validBox: "Số ô phải lớn hơn 0",
                nameLengthRegex: "Họ tên phải có độ dài từ 3-100 kí tự.",
                nameNumberRegex: "Họ tên không thể chứa chữ số.",
                nameRegex: "Họ tên không thể chứa ký tự đặc biệt",
                familyMemberListRegex: "Người ký gửi không thể để trống",
            },
            rules: {
                validBirthDate: function (input) {
                    if (input.is("[name='birthDate']")) {
                        try {
                            const date = moment(input.val(), "DD/MM/YYYY", true);

                            // Check if the date is valid
                            return date.isValid();
                        }
                        catch (error) {
                            return false;
                        }
                    }
                    return true;
                },
                validDeathDate: function (input) {
                    if (input.is("[name='deathDate']")) {
                        try {
                            const date = moment(input.val(), "DD/MM/YYYY", true);

                            // Check if the date is valid
                            return date.isValid();
                        }
                        catch (error) {
                            return false;
                        }
                    }
                    return true;
                },
                validExpiredDate: function (input) {
                    if (input.is("[name='expiredDate']")) {
                        try {
                            const date = moment(input.val(), "DD/MM/YYYY", true);

                            // Check if the date is valid
                            return date.isValid();
                        }
                        catch (error) {
                            return false;
                        }
                    }
                    return true;
                },
                validBox: function (input) {
                    if (input.is("[name='boxNumber']") && input.val() == 0) {
                        return false;
                    }
                    return true;
                },
                validRow: function (input) {
                    if (input.is("[name='rowNumber']") && input.val() == 0) {
                        return false;
                    }
                    return true;
                },
                nameLengthRegex: function (input) {
                    if (input.is("[name='name']")) {
                        let newName = $("[name='name']").val();
                        var regrex = /^(?=.{0,2}$)|(?=.{101,}$)/;
                        return !regrex.test(newName)
                    }
                    return true;
                },
                nameNumberRegex: function (input) {
                    if (input.is("[name='name']")) {
                        let newName = $("[name='name']").val();
                        var regrex = /^[^0-9]+$/;
                        return regrex.test(newName)
                    }
                    return true;
                },
                nameRegex: function (input) {
                    if (input.is("[name='name']")) {
    @{
        string pattern = @"[!@#\$%\^&\*\(\),\.\?""\:\{\}\|<>]";
        string jsPattern = pattern.Replace("\\", "\\\\"); // Escape thêm cho JavaScript
    }
                                                var criteria = [
                            { regex: /^[\p{L}\p{M}\p{N}\p{Zs}]+$/u, message: "Họ tên không thể chứa ký tự đặc biệt." }
                        ];
                        let newName = $("[name='name']").val();
                        var errors = criteria.filter(function (criterion) {
                            return !criterion.regex.test(newName);
                        }).map(function (criterion) {
                            return criterion.message;
                        });

                        if (errors.length > 0) {
                            return false;
                        }
                    }
                    return true;
                },
                familyMemberListRegex: function (input) {
                    if (input.is("[name='familyMemberIdList']")) {
                        var familyMemberIdList = $("[name='familyMemberIdList']").val();
                        if (familyMemberIdList == null || familyMemberIdList?.length == 0) {
                            return false;
                        }
                    }
                    return true;
                }

            }
        });

        form.bind("submit", function (e) {
            e.preventDefault();
            var validator = formDom.data("kendoValidator");

            if (validator.validate()) {
                e.preventDefault();
                let dataItem = {
                    ...formData,
                    ...e.model,
                    gender: Number(e.model.gender),
                    familyMemberIdList: $("#familyMemberIdList").data("kendoMultiSelect").value(),
                };
                var response = ajax("POST", "/Urn/CreateOrUpdateUrn", dataItem, () => {
                    $(gridId).data("kendoGrid").dataSource.filter({});
                    myWindow.data("kendoWindow").close();
                });
            }
            else {
                return false;
            }
        });
        RegisterPreventInputCharOnInputEvent("boxNumber");
        RegisterPreventInputCharOnInputEvent("rowNumber");



        //Set ảnh khi edit
        if (formData.fileImageUrl != null && formData.fileImageUrl != "" && formData.isHasImage) {
            $("#file").closest(".k-form-field-wrap").append("<div class='notificationFile k-color-success mt-10 fl-r'><span class='k-icon k-i-check-outline k-button-icon'></span> Đã có hình ảnh</div>");
            var srcUrl = formData.fileImageUrl == formData.fileImageUrlWithLowQuality ? formData.fileImageUrlWithLowQuality : formData.fileImageUrl;
            let image = `<img src="${formData.fileImageUrlWithLowQuality}" width=100px; height=100px; style="padding-right: 5px;">`
            $("#file").closest(".k-form-field-wrap").append("<div>" + image + "</div>");
        }
        setTimeout(() => {
            $("input[title='name']").focus();
        }, 500);

        function addPreview(file, wrapper) {
            var raw = file.rawFile;
            var reader = new FileReader();

            if (raw) {
                reader.onload = function (event) {
                    // var preview = $("<img class='image-preview'>").attr("src", this.result);
                    var preview = $('<img>', {
                        src: event.target.result,
                        width: 100,
                        height: 100
                    });
                    wrapper.find(".k-file[data-uid='" + file.uid + "'] .k-file-group-wrapper")
                        .replaceWith(preview);
                };
                reader.readAsDataURL(raw);
            }
        }
        function remove() {
            setTimeout(() => {
                if ($(".k-window #window").length > 0) {
                    $("#window").parent().remove();
                    $(gridId).after("<div id='window'></div>");
                }
            }, 200)
        }

        myWindow.kendoWindow({
            title: "",
            // minWidth:"20rem",
            width: "80%",
            height: "80%",
            visible: false,
            actions: ["Close"],
            // resizable: false,
            draggable: false,
            modal: true,
            close: function (e) {
                //$("#window").empty();
                remove();
            },
        }).data("kendoWindow").title(title).center();
        myWindow.data("kendoWindow").open();
    }
    function RegisterPreventInputCharOnInputEvent(id) {
        // Prevent non-numeric characters from being input
        $(`#${id}`).on("keydown", function (e) {
            // Allow: backspace, delete, tab, escape, enter, and .
            if ($.inArray(e.keyCode, [46, 8, 9, 27, 13]) !== -1 ||
                // Allow: Ctrl/cmd+A, Ctrl/cmd+C, Ctrl/cmd+V, Ctrl/cmd+X
                (e.keyCode === 65 && (e.ctrlKey === true || e.metaKey === true)) ||
                (e.keyCode === 67 && (e.ctrlKey === true || e.metaKey === true)) ||
                (e.keyCode === 86 && (e.ctrlKey === true || e.metaKey === true)) ||
                (e.keyCode === 88 && (e.ctrlKey === true || e.metaKey === true)) ||
                // Allow: home, end, left, right, down, up
                (e.keyCode >= 35 && e.keyCode <= 39)) {
                // let it happen, don't do anything
                return;
            }
            // Ensure that it is a number and stop the keypress
            if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
                e.preventDefault();
            }
        });
    }
    function ExportExcel() {
        let dataSheet1 = [
            {
                cells: [
                    {
                        value: "Họ tên", textAlign: "center", background: "#428dd8"
                    },
                    {
                        value: "Pháp danh", textAlign: "center", background: "#428dd8"
                    },
                    {
                        value: "Giới tính", textAlign: "center", background: "#428dd8"
                    },
                    {
                        value: "Ngày sinh (Ngày âm)", textAlign: "center", background: "#428dd8"
                    },
                    {
                        value: "Ngày mất (Ngày âm)", textAlign: "center", background: "#428dd8"
                    },
                    {
                        value: "Thời hạn ký gửi", textAlign: "center", background: "#428dd8"
                    },
                    {
                        value: "Người ký gửi", textAlign: "center", background: "#428dd8"
                    },
                    {
                        value: "Vị trí tháp", textAlign: "center", background: "#428dd8"
                    },
                    {
                        value: "Tên tủ", textAlign: "center", background: "#428dd8"
                    },
                    {
                        value: "Số hàng - Số ô", textAlign: "center", background: "#428dd8"
                    },
                    {
                        value: "Ghi chú", textAlign: "center", background: "#428dd8"
                    }
                ]
            }];
        let dataSourceUrn = $(gridId).data("kendoGrid").dataSource.data();
        for (let index = 0; index < dataSourceUrn.length; index++) {
            dataSheet1.push({
                cells: [
                    { value: dataSourceUrn[index].name },
                    { value: dataSourceUrn[index].dharmaName },
                    { value: dataSourceUrn[index].genderName },
                    { value: kendo.toString(kendo.parseDate(dataSourceUrn[index].birthDate), "dd/MM/yyyy") },
                    { value: kendo.toString(kendo.parseDate(dataSourceUrn[index].deathDate), "dd/MM/yyyy") },
                    { value: kendo.toString(kendo.parseDate(dataSourceUrn[index].expiredDate), "dd/MM/yyyy") },
                    { value: dataSourceUrn[index].familyMemberList.map(i => i.name).join(",") },
                    { value: dataSourceUrn[index].towerLocation },
                    { value: dataSourceUrn[index].cabinetName },
                    { value: `${dataSourceUrn[index].rowNumber} - ${dataSourceUrn[index].boxNumber}` },
                    { value: dataSourceUrn[index].note },
                ]
            })
        }


        var workbook = new kendo.ooxml.Workbook({
            sheets: [
                {
                    name: "Danh sách linh cốt",
                    columns: [
                        { width: 200 }, { autoWidth: true }, { autoWidth: true }, { autoWidth: true },
                        { autoWidth: true }, { autoWidth: true }, { autoWidth: true }, { autoWidth: true },
                        { autoWidth: true }, { autoWidth: true }, { autoWidth: true }, { autoWidth: true },
                    ],
                    rows: dataSheet1,
                }
            ]
        });
        kendo.saveAs({
            dataURI: workbook.toDataURL(),
            fileName: "Danh sách linh cốt _ " + kendo.toString(new Date(), "dd_MM_yyyy__HH_mm_ss") + ".xlsx"
        });
    }

    async function editUrn(id) {
        var response = ajax("GET", "/Urn/GetUrnById", { urnId: id }, (urnResponse) => {
            renderCreateOrEditForm(false, urnResponse.data);
        }, null, false);
    }
    function deleteUrn(id) {
        $('#dialog').kendoConfirm({
            title: "THÔNG BÁO XÓA LINH CỐT",
            content: "Bạn có chắc chắn xóa linh cốt này không?",
            size: "small",
            messages: {
                okText: "Đồng ý",
                cancel: "Hủy"

            },
        }).data("kendoConfirm").open().result.done(function () {
            var response = ajax("GET", "/Urn/DeleteUrnById", {
                urnId: id
            }, () => {
                $(gridId).data("kendoGrid").dataSource.filter({});
            });
        })

        $("#window").after("<div id='dialog'></div>");
    }
    function InitGrid() {
        const textNgaySinhMat = function (data) {
            var birthDateString = kendo.toString(kendo.parseDate(data.birthDate), "dd/MM/yyyy")
            var deathDateString = kendo.toString(kendo.parseDate(data.deathDate), "dd/MM/yyyy")
            return `${birthDateString} - ${deathDateString}`
        }

        const renderListCard = function(data){
            let html = "";
            if(data.length > 0){
            for (let i = 0; i < data.length; i++) { 
                let item = data[i];
                html += `
                <div class="k-card mt-2">
                    <div class="k-card-header bg-success text-white">
                        <h5 class="k-card-title">${item.name}${(item.dharmaName ? " - " + item.dharmaName : "")}</h5>
                    </div>
                    <img alt="Hình ảnh" class="k-card-media" src="${item.fileImageUrl}" />
                    <div class="k-card-body">
                          <div class="infor-container">
                                    <div class="title">Loại:</div>
                                    <div class="content">${item.urnTypeName}</div>
                                </div>
                             <div class="infor-container">
                                <div class="title">Họ tên:</div>
                                <div class="content">${item.name}</div>
                            </div>
                            <div class="infor-container">
                                <div class="title">Pháp danh:</div>
                                <div class="content">${item.dharmaName}</div>
                            </div>
                            <div class="infor-container">
                                <div class="title">Giới tính:</div>
                                <div class="content">${item.genderName}</div>
                            </div>

                            <div class="infor-container">
                                <div class="title">Ngày sinh (Ngày âm):</div>
                                <div class="content">${kendo.toString(kendo.parseDate(item.birthDate), "dd/MM/yyyy")}</div>
                            </div>
                            <div class="infor-container">
                                <div class="title">Ngày mất (Ngày âm):</div>
                                <div class="content">${kendo.toString(kendo.parseDate(item.deathDate), "dd/MM/yyyy")}</div>
                            </div>
                            <div class="infor-container">
                                <div class="title">Thời hạn ký gửi:</div>
                                <div class="content">${kendo.toString(kendo.parseDate(item.expiredDate), "dd/MM/yyyy")}</div>
                            </div>
                            <div class="infor-container">
                                <div class="title">Vị trí tháp:</div>
                                <div class="content">${item.towerLocation}</div>
                            </div>
                            <div class="infor-container">
                                <div class="title">Tên tủ:</div>
                                <div class="content">${item.cabinetName}</div>
                            </div>
                            <div class="infor-container">
                                <div class="title">Số hàng:</div>
                                <div class="content">${item.rowNumber}</div>
                            </div>
                            <div class="infor-container">
                                <div class="title">Ô số:</div>
                                <div class="content">${item.boxNumber}</div>
                            </div>
                            <div class="infor-container">
                                <div class="title">Ghi chú:</div>
                                <div class="content">${item.note} </div>
                            </div>
                    </div>
                    <div class="k-actions k-card-actions d-none">
                        <button class="k-button k-button-flat-primary k-button-flat k-button-md k-rounded-md">Map</button>
                        <button class="k-button k-button-flat-primary k-button-flat k-button-md k-rounded-md">Weather</button>
                    </div>
                    <div class="k-card-footer  d-none">
                        <a class="k-button k-button-flat-base k-button-flat k-button-md k-rounded-md k-icon-button"><span class="k-button-icon facebook"></span></a>
                        <a class="k-button k-button-flat-base k-button-flat k-button-md k-rounded-md k-icon-button"><span class="k-button-icon pinterest"></span></a>
                        <a class="k-button k-button-flat-base k-button-flat k-button-md k-rounded-md k-icon-button"><span class="k-button-icon twitter"></span></a>
                    </div>
                </div>
                `;
            }
            }
            else{
                html = "Chưa có linh cốt ký gửi";
            }

            $(gridId).html(html)
        }

        const callbackSuccess = function (response) {
            
            if (response.isSuccess == false) {
                showErrorMessages(response.errorMessageList);
                response.data.data = [];

            }
            else {

            }
            renderListCard(response.data.data);
        }
        ajax("GET", url = "/Urn/GetUrnList", { PageSize: 100 },
            callbackSuccess, 
        () => {
            location.href = 'Account/Logout';
        }, false);

    }
    

</script>
<script type="text/javascript">
    $(document).ready(function () {
        InitGrid();
        $(window).trigger("resize");
    });
</script>
<style>
    .k-form-buttons {
        justify-content: flex-end;
    }
</style>
