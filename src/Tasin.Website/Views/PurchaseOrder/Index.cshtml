@{
    ViewData["Title"] = "Danh sách đơn hàng PO";
}

<div>
    <h4 class="demo-section wide title">@ViewData["Title"]</h4>
    <div id="divContent">
        <div id="gridId">
        </div>
    </div>
    <div id="window"></div>
    <div id="dialog"></div>
</div>

<script type="text/javascript">
    let gridId = "#gridId";

    function getSearchModel() {
        let searchString = $("#searchString").val();
        let customerId = $("#customerId").data("kendoDropDownList")?.value();
        let status = $("#status").data("kendoDropDownList")?.value();
        let dateFromStr = $("#dateFrom").val();
        let dateToStr = $("#dateTo").val();

        // Convert date strings to ISO format if they exist
        let dateFrom = null;
        let dateTo = null;

        if (dateFromStr) {
            let dateFromObj = new Date(dateFromStr);
            dateFrom = dateFromObj.toISOString();
        }

        if (dateToStr) {
            let dateToObj = new Date(dateToStr);
            // Set to end of day
            dateToObj.setHours(23, 59, 59, 999);
            dateTo = dateToObj.toISOString();
        }

        return {
            searchString: searchString || null,
            customer_ID: customerId && customerId !== "" ? parseInt(customerId) : null,
            status: status || null,
            dateFrom: dateFrom,
            dateTo: dateTo
        };
    }

    async function ExportExcel() {
        let dataSheet1 = [
            {
                cells: [
                    { value: "Mã đơn hàng", textAlign: "center", background: "#428dd8" },
                    { value: "Khách hàng", textAlign: "center", background: "#428dd8" },
                    { value: "Trạng thái", textAlign: "center", background: "#428dd8" },
                    { value: "Tổng tiền chưa thuế", textAlign: "center", background: "#428dd8" },
                    { value: "Tổng tiền", textAlign: "center", background: "#428dd8" },
                    { value: "Ngày tạo", textAlign: "center", background: "#428dd8" },
                    { value: "Người tạo", textAlign: "center", background: "#428dd8" }
                ]
            }];

        var searchModel = getSearchModel();
        let postData = {
            ...searchModel,
            pageSize: 999999999,
            pageNumber: 1
        }
        let dataSourcePO = null;
        var response = await ajax("GET", "/PurchaseOrder/GetPurchaseOrderList", postData, (poResponse) => {
            dataSourcePO = poResponse.data.data;
        }, null, false);
        if (dataSourcePO == null) return;

        for (let index = 0; index < dataSourcePO.length; index++) {
            dataSheet1.push({
                cells: [
                    { value: dataSourcePO[index].code },
                    { value: dataSourcePO[index].customerName },
                    { value: dataSourcePO[index].statusName },
                    { value: dataSourcePO[index].totalPriceNoTax },
                    { value: dataSourcePO[index].totalPrice },
                    { value: dataSourcePO[index].createdDate ? kendo.toString(kendo.parseDate(dataSourcePO[index].createdDate), "dd/MM/yyyy HH:mm") : '' },
                    { value: dataSourcePO[index].createdByName }
                ]
            })
        }

        var workbook = new kendo.ooxml.Workbook({
            sheets: [
                {
                    name: "Danh sách đơn hàng PO",
                    columns: [
                        { autoWidth: true }, { autoWidth: true }, { autoWidth: true },
                        { autoWidth: true }, { autoWidth: true }, { autoWidth: true }, { autoWidth: true }
                    ],
                    rows: dataSheet1,
                }
            ]
        });
        kendo.saveAs({
            dataURI: workbook.toDataURL(),
            fileName: "Danh sách đơn hàng PO _ " + kendo.toString(new Date(), "dd_MM_yyyy__HH_mm_ss") + ".xlsx"
        });
    }

    function renderCreateOrEditForm(isCreate = true, dataPO = {}) {
        let myWindow = $("#window");
        $("#window").html("<form id='formCreateAndEdit'></form>");

        let formData = {
            id: 0,
            code: "",
            customer_ID: null,
            status: 0,
            totalPrice: 0,
            totalPriceNoTax: 0,
            purchaseOrderItems: [],
            ...dataPO
        };

        let strSubmit = "Thêm";
        let title = "THÊM MỚI ĐƠN HÀNG PO"
        if (isCreate == false) {
            strSubmit = "Cập nhật";
            title = "CẬP NHẬT ĐƠN HÀNG PO";
        }

        $("#formCreateAndEdit").kendoForm({
            orientation: "vertical",
            formData: formData,
            type: "group",
            items: [
                {
                    field: "code",
                    title: "Mã đơn hàng",
                    label: "Mã đơn hàng:",
                    attributes: { readonly: !isCreate }
                },
                {
                    field: "customer_ID",
                    title: "Khách hàng",
                    label: "Khách hàng (*):",
                    editor: "DropDownList",
                    editorOptions: {
                        optionLabel: "Chọn khách hàng",
                        dataTextField: "text",
                        dataValueField: "value",
                        filter: "contains",
                        template: function (dataItem) {
                            if (!dataItem || !dataItem.text) {
                                return "N/A";
                            }
                            return dataItem.text;
                        },
                        valueTemplate: function (dataItem) {
                            if (!dataItem || !dataItem.text) {
                                return "Chọn khách hàng";
                            }
                            return dataItem.text;
                        },
                        dataSource: {
                            transport: {
                                read: {
                                    url: "/Common/GetDataOptionsDropdown",
                                    data: { type: "Customer" }
                                }
                            },
                            schema: {
                                parse: function (response) {
                                    if (response && response.isSuccess && response.data) {
                                        return response.data.filter(function (item) {
                                            return item && item.text && item.value !== undefined;
                                        });
                                    }
                                    return [];
                                }
                            }
                        },
                    },
                    validation: {
                        validationMessage: "Vui lòng chọn khách hàng",
                        required: true
                    },
                },
                {
                    field: "status",
                    title: "Trạng thái",
                    label: "Trạng thái:",
                    editor: "DropDownList",
                    editorOptions: {
                        dataTextField: "text",
                        dataValueField: "data",
                        template: function (dataItem) {
                            if (!dataItem || !dataItem.text) {
                                return "N/A";
                            }
                            return dataItem.text;
                        },
                        valueTemplate: function (dataItem) {
                            if (!dataItem || !dataItem.text) {
                                return "Chọn trạng thái";
                            }
                            return dataItem.text;
                        },
                        dataSource: {
                            transport: {
                                read: {
                                    url: "/Common/GetDataOptionsDropdown",
                                    data: { type: "POStatus" }
                                }
                            },
                            schema: {
                                parse: function (response) {
                                    if (response && response.isSuccess && response.data) {
                                        return response.data.filter(function (item) {
                                            return item && item.text && item.data !== undefined;
                                        });
                                    }
                                    return [];
                                }
                            }
                        }
                    }
                },
                {
                    field: "totalPriceNoTax",
                    title: "Tổng tiền chưa thuế",
                    label: "Tổng tiền chưa thuế:",
                    editor: "NumericTextBox",
                    editorOptions: {
                        format: "n0",
                        decimals: 0
                    },
                    attributes: { readonly: true }
                },
                {
                    field: "totalPrice",
                    title: "Tổng tiền",
                    label: "Tổng tiền:",
                    editor: "NumericTextBox",
                    editorOptions: {
                        format: "n0",
                        decimals: 0
                    },
                    attributes: { readonly: true }
                }
            ],
            messages: {
                submit: strSubmit, clear: "Đặt lại"
            },
            submit: function (e) {
                e.preventDefault();
                let dataItem = {
                    ...formData,
                    ...e.model,
                };

                if (dataItem.id > 0) {
                    var response = ajax("PUT", "/PurchaseOrder/UpdatePurchaseOrder", dataItem, () => {
                        $(gridId).data("kendoGrid").dataSource.filter({});
                        myWindow.data("kendoWindow").close();
                    });
                } else {
                    var response = ajax("POST", "/PurchaseOrder/CreatePurchaseOrder", dataItem, () => {
                        $(gridId).data("kendoGrid").dataSource.filter({});
                        myWindow.data("kendoWindow").close();
                    });
                }
            },
            close: function (e) {
                $(this.element).empty();
            },
        });

        setTimeout(() => {
            $("input[title='code']").focus();
        }, 500);

        function remove() {
            setTimeout(() => {
                if ($(".k-window #window").length > 0) {
                    $("#window").parent().remove();
                    $(gridId).after("<div id='window'></div>");
                }
            }, 200)
        }

        myWindow.kendoWindow({
            width: "600px",
            title: "",
            visible: false,
            actions: ["Close"],
            resizable: false,
            draggable: false,
            modal: true,
            close: function (e) {
                remove();
            },
        }).data("kendoWindow").title(title).center();
        myWindow.data("kendoWindow").open();
    }

    async function editPurchaseOrder(id) {
        var response = ajax("GET", "/PurchaseOrder/GetPurchaseOrderById", { purchaseOrderId: id }, (response) => {
            renderCreateOrEditForm(false, response.data);
        }, null, false);
    }

    function deletePurchaseOrder(id) {
        $('#dialog').kendoConfirm({
            title: "THÔNG BÁO XÓA ĐƠN HÀNG PO",
            content: "Bạn có chắc chắn xóa đơn hàng PO này không?",
            size: "medium",
            messages: {
                okText: "Đồng ý",
                cancel: "Hủy"
            },
        }).data("kendoConfirm").open().result.done(function () {
            var response = ajax("DELETE", "/PurchaseOrder/DeletePurchaseOrderById/" + id, {}, () => {
                $(gridId).data("kendoGrid").dataSource.filter({});
            });
        })

        $("#window").after("<div id='dialog'></div>");
    }

    function viewPurchaseOrderDetail(id) {
        var response = ajax("GET", "/PurchaseOrder/GetPurchaseOrderById", { purchaseOrderId: id }, (response) => {
            showPurchaseOrderDetail(response.data);
        }, null, false);
    }

    function showPurchaseOrderDetail(data) {
        let myWindow = $("#window");
        let detailHtml = `
            <div class="purchase-order-detail">
                <div class="row">
                    <div class="col-md-6">
                        <p><strong>Mã đơn hàng:</strong> ${data.code || ''}</p>
                        <p><strong>Khách hàng:</strong> ${data.customerName || ''}</p>
                        <p><strong>Trạng thái:</strong> ${data.statusName || ''}</p>
                    </div>
                    <div class="col-md-6">
                        <p><strong>Tổng tiền chưa thuế:</strong> ${kendo.toString(data.totalPriceNoTax || 0, "n0")} VNĐ</p>
                        <p><strong>Tổng tiền:</strong> ${kendo.toString(data.totalPrice || 0, "n0")} VNĐ</p>
                        <p><strong>Ngày tạo:</strong> ${data.createdDate ? kendo.toString(kendo.parseDate(data.createdDate), "dd/MM/yyyy HH:mm") : ''}</p>
                    </div>
                </div>
                <hr>
                <h5>Danh sách sản phẩm:</h5>
                <div id="itemsGrid"></div>
            </div>
        `;

        $("#window").html(detailHtml);

        // Initialize items grid
        $("#itemsGrid").kendoGrid({
            dataSource: {
                data: data.purchaseOrderItems || []
            },
            columns: [
                { field: "productName", title: "Sản phẩm", width: 200 },
                { field: "quantity", title: "Số lượng", width: 100, format: "{0:n2}" },
                { field: "unitName", title: "Đơn vị", width: 100 },
                { field: "price", title: "Đơn giá", width: 120, format: "{0:n0}" },
                { field: "taxRate", title: "Thuế suất (%)", width: 100, format: "{0:n1}" },
                {
                    title: "Thành tiền",
                    width: 150,
                    template: "#= kendo.toString((quantity || 0) * (price || 0), 'n0') # VNĐ"
                }
            ],
            pageable: false,
            scrollable: true,
            height: 300
        });

        function remove() {
            setTimeout(() => {
                if ($(".k-window #window").length > 0) {
                    $("#window").parent().remove();
                    $(gridId).after("<div id='window'></div>");
                }
            }, 200)
        }

        myWindow.kendoWindow({
            width: "900px",
            height: "600px",
            title: "CHI TIẾT ĐƠN HÀNG PO",
            visible: false,
            actions: ["Close"],
            resizable: true,
            draggable: true,
            modal: true,
            close: function (e) {
                remove();
            },
        }).data("kendoWindow").center();
        myWindow.data("kendoWindow").open();
    }

    async function ExportExcel() {
        let dataSheet1 = [
            {
                cells: [
                    { value: "Mã đơn hàng", textAlign: "center", background: "#428dd8" },
                    { value: "Khách hàng", textAlign: "center", background: "#428dd8" },
                    { value: "Trạng thái", textAlign: "center", background: "#428dd8" },
                    { value: "Tổng tiền chưa thuế", textAlign: "center", background: "#428dd8" },
                    { value: "Tổng tiền", textAlign: "center", background: "#428dd8" },
                    { value: "Ngày tạo", textAlign: "center", background: "#428dd8" },
                    { value: "Người tạo", textAlign: "center", background: "#428dd8" }
                ]
            }];

        var searchModel = getSearchModel();
        let postData = {
            ...searchModel,
            pageSize: 999999999,
            pageNumber: 1
        }
        let dataSourcePO = null;
        var response = await ajax("GET", "/PurchaseOrder/GetPurchaseOrderList", postData, (poResponse) => {
            dataSourcePO = poResponse.data.data;
        }, null, false);
        if (dataSourcePO == null) return;

        for (let index = 0; index < dataSourcePO.length; index++) {
            dataSheet1.push({
                cells: [
                    { value: dataSourcePO[index].code },
                    { value: dataSourcePO[index].customerName },
                    { value: dataSourcePO[index].statusName },
                    { value: dataSourcePO[index].totalPriceNoTax },
                    { value: dataSourcePO[index].totalPrice },
                    { value: dataSourcePO[index].createdDate ? kendo.toString(kendo.parseDate(dataSourcePO[index].createdDate), "dd/MM/yyyy HH:mm") : '' },
                    { value: dataSourcePO[index].createdByName }
                ]
            })
        }

        var workbook = new kendo.ooxml.Workbook({
            sheets: [
                {
                    name: "Danh sách đơn hàng PO",
                    columns: [
                        { width: 150 }, { width: 200 }, { width: 150 },
                        { width: 150 }, { width: 150 }, { width: 150 }, { width: 150 }
                    ],
                    rows: dataSheet1,
                }
            ]
        });
        kendo.saveAs({
            dataURI: workbook.toDataURL(),
            fileName: "Danh sách đơn hàng PO _ " + kendo.toString(new Date(), "dd_MM_yyyy__HH_mm_ss") + ".xlsx"
        });
    }

    function getSearchModel() {
        let searchString = $("#searchString").val();
        let customerId = $("#customerId").data("kendoDropDownList")?.value();
        let status = $("#status").data("kendoDropDownList")?.value();
        let dateFromStr = $("#dateFrom").val();
        let dateToStr = $("#dateTo").val();

        // Convert date strings to ISO format if they exist
        let dateFrom = null;
        let dateTo = null;

        if (dateFromStr) {
            let dateFromObj = new Date(dateFromStr);
            dateFrom = dateFromObj.toISOString();
        }

        if (dateToStr) {
            let dateToObj = new Date(dateToStr);
            // Set to end of day
            dateToObj.setHours(23, 59, 59, 999);
            dateTo = dateToObj.toISOString();
        }

        return {
            searchString: searchString || null,
            customer_ID: customerId && customerId !== "" ? parseInt(customerId) : null,
            status: status || null,
            dateFrom: dateFrom,
            dateTo: dateTo
        };
    }

    function generateInvoice(id) {
        window.open(`/PurchaseOrder/PreviewInvoice?purchaseOrderId=${id}`, '_blank');
    }

    function exportInvoicePdf(id) {
        window.open(`/PurchaseOrder/ExportInvoicePdf?purchaseOrderId=${id}`, '_blank');
    }

    function exportInvoiceExcel(id) {
        window.open(`/PurchaseOrder/ExportInvoiceExcel?purchaseOrderId=${id}`, '_blank');
    }

    function exportInvoiceWord(id) {
        window.open(`/PurchaseOrder/ExportInvoiceWord?purchaseOrderId=${id}`, '_blank');
    }

    function InitGrid() {
        let htmlToolbar = `
            <div id='toolbar' class='purchase-order-toolbar'>
                <div class="toolbar-filters">
                    <div class="filter-group">
                        <label class="filter-label">Tìm kiếm:</label>
                        <div class="filter-input">
                            <input type="text" id="searchString" placeholder="Nhập mã đơn hàng..."/>
                        </div>
                    </div>
                    <div class="filter-group">
                        <label class="filter-label">Khách hàng:</label>
                        <div class="filter-input">
                            <select id="customerId"></select>
                        </div>
                    </div>
                    <div class="filter-group">
                        <label class="filter-label">Trạng thái:</label>
                        <div class="filter-input">
                            <select id="status"></select>
                        </div>
                    </div>
                    <div class="filter-group">
                        <label class="filter-label">Từ ngày:</label>
                        <div class="filter-input">
                            <input type="date" id="dateFrom"/>
                        </div>
                    </div>
                    <div class="filter-group">
                        <label class="filter-label">Đến ngày:</label>
                        <div class="filter-input">
                            <input type="date" id="dateTo"/>
                        </div>
                    </div>
                    <div class="filter-group action-group">
                        <button id="search" title="Tìm kiếm" class="btn-search">
                            <i class="fas fa-search"></i>
                        </button>
                    </div>
                </div>
                <div class="toolbar-actions">
                    <button id='create' title="Thêm đơn hàng mới" class='btn-create _permission_' data-enum='32'>
                        <i class="fas fa-plus"></i>
                        <span>Thêm mới</span>
                    </button>
                    <button id="exportExcel" class="btn-export">
                        <i class="fas fa-file-excel"></i>
                        <span>Export Excel</span>
                    </button>
                </div>
            </div>
        `;

        $(gridId).kendoGrid({
            dataSource: {
                transport: {
                    read: {
                        url: "/PurchaseOrder/GetPurchaseOrderList",
                        datatype: "json",
                    },
                    parameterMap: function (data, type) {
                        if (type == "read") {
                            var searchModel = getSearchModel();
                            return {
                                ...searchModel,
                                pageSize: data.pageSize,
                                pageNumber: data.page
                            }
                        }
                    },
                },
                serverPaging: true,
                serverFiltering: true,
                page: 1,
                pageSize: 20,
                schema: {
                    type: 'json',
                    parse: function (response) {
                        if (response.isSuccess == false) {
                            showErrorMessages(response.errorMessageList);
                            return {
                                data: [],
                                total: 0
                            }
                        }
                        return response.data;
                    },
                    model: {
                        id: "id",
                        fields: {
                            createdDate: { type: "date" },
                            updatedDate: { type: "date" },
                            stt: { type: "number" },
                            totalPrice: { type: "number" },
                            totalPriceNoTax: { type: "number" }
                        }
                    },
                    data: "data",
                    total: "total"
                },
            },
            selectable: true,
            pageable: {
                pageSizes: [10, 20, 50],
            },
            dataBinding: function (e) {
                record = (this.dataSource._page - 1) * this.dataSource._pageSize;
            },
            toolbar: htmlToolbar,
            detailInit: detailInit,
            columns: [
                {
                    field: "",
                    title: "STT",
                    headerAttributes: { style: "text-align: center; justify-content: center" },
                    attributes: { style: "text-align:center;" },
                    template: "#: ++record #",
                    width: 80
                },
                {
                    field: "code",
                    title: "Mã đơn hàng",
                    headerAttributes: { style: "text-align: center; justify-content: center" },
                    attributes: { style: "text-align:center;" },
                    width: 150,
                },
                {
                    field: "customerName",
                    title: "Khách hàng",
                    headerAttributes: { style: "text-align: center; justify-content: center" },
                    attributes: { style: "text-align:left;" },
                    width: 200,
                },
                {
                    field: "statusName",
                    title: "Trạng thái",
                    width: 130,
                    headerAttributes: { style: "text-align: center; justify-content: center" },
                    attributes: { style: "text-align:center;" },
                    template: function (dataItem) {
                        // Add null check for dataItem
                        if (!dataItem) {
                            return '<span class="badge badge-secondary">N/A</span>';
                        }

                        let statusClass = "";
                        // Status có thể được lưu dưới dạng enum name hoặc enum value
                        switch (dataItem.status) {
                            case "New":
                            case "0":
                                statusClass = "badge-secondary"; break; // Mới
                            case "Pending":
                            case "1":
                                statusClass = "badge-warning"; break;   // Đang chờ xác nhận
                            case "Confirmed":
                            case "2":
                                statusClass = "badge-success"; break;   // Đã xác nhận
                            case "Executed":
                            case "3":
                                statusClass = "badge-info"; break;      // Đã tạo đơn tổng hợp
                            case "Cancel":
                            case "4":
                                statusClass = "badge-danger"; break;    // Đã hủy
                            default: statusClass = "badge-secondary";
                        }
                        return `<span class="badge ${statusClass}">${dataItem.statusName || 'N/A'}</span>`;
                    }
                },
                {
                    field: "totalPriceNoTax",
                    title: "Tổng tiền chưa thuế",
                    width: 150,
                    headerAttributes: { style: "text-align: center; justify-content: center" },
                    attributes: { style: "text-align:right;" },
                    template: "<span class='currency'>#: kendo.toString(totalPriceNoTax, 'n0') # VNĐ</span>",
                },
                {
                    field: "totalPrice",
                    title: "Tổng tiền",
                    width: 150,
                    headerAttributes: { style: "text-align: center; justify-content: center" },
                    attributes: { style: "text-align:right;" },
                    template: "<span class='currency'>#: kendo.toString(totalPrice, 'n0') # VNĐ</span>",
                },
                {
                    field: "createdDate",
                    title: "Ngày tạo",
                    width: 150,
                    headerAttributes: { style: "text-align: center; justify-content: center" },
                    attributes: { style: "text-align:center;" },
                    template: '#: kendo.toString(kendo.parseDate(createdDate), "dd/MM/yyyy HH:mm")#',
                },
                {
                    field: "",
                    title: "Thao tác",
                    width: 200,
                    attributes: { style: "text-align: center;" },
                    headerAttributes: { style: "text-align: center; justify-content: center" },
                    template: `
                        <div class="action-buttons">
                            <button onclick='editPurchaseOrder(#=id#)' title='Chỉnh sửa' class='btn-action btn-edit _permission_' data-enum='33'>
                                <i class='fas fa-edit'></i>
                            </button>
                            <button onclick='deletePurchaseOrder(#=id#)' title='Xoá' class='btn-action btn-delete _permission_' data-enum='34'>
                                <i class='fas fa-trash'></i>
                            </button>
                            <div class="dropdown d-inline-block">
                                <button class="btn-action btn-invoice dropdown-toggle" type="button" data-bs-toggle="dropdown" title="Xuất hóa đơn">
                                    <i class="fas fa-file-invoice"></i>
                                </button>
                                <ul class="dropdown-menu">
                                    <li><a class="dropdown-item" href="javascript:void(0)" onclick="generateInvoice(#=id#)">
                                        <i class="fas fa-eye me-2"></i>Xem trước</a></li>
                                    <li><a class="dropdown-item" href="javascript:void(0)" onclick="exportInvoicePdf(#=id#)">
                                        <i class="fas fa-file-pdf me-2"></i>Xuất PDF</a></li>
                                    <li><a class="dropdown-item" href="javascript:void(0)" onclick="exportInvoiceExcel(#=id#)">
                                        <i class="fas fa-file-excel me-2"></i>Xuất Excel</a></li>
                                    <li><a class="dropdown-item" href="javascript:void(0)" onclick="exportInvoiceWord(#=id#)">
                                        <i class="fas fa-file-word me-2"></i>Xuất Word</a></li>
                                </ul>
                            </div>
                        </div>
                    `
                }
            ],
            dataBound: function (e) {
                CheckPermission();
            }
        });
    }

    function detailInit(e) {
        $("<div/>").appendTo(e.detailCell).kendoGrid({
            dataSource: {
                data: e.data.purchaseOrderItems || [],
                schema: {
                    model: {
                        fields: {
                            quantity: { type: "number" },
                            price: { type: "number" },
                            taxRate: { type: "number" },
                            lossRate: { type: "number" },
                            processingFee: { type: "number" },
                            profitMargin: { type: "number" }
                        }
                    }
                }
            },
            scrollable: false,
            sortable: true,
            pageable: false,
            columns: [
                { field: "productName", title: "Sản phẩm", width: "200px" },
                { field: "quantity", title: "Số lượng", width: "100px", template: "#= '<span class=\"number\">' + kendo.toString(quantity, 'n2') + '</span>' #" },
                { field: "unitName", title: "Đơn vị", width: "100px" },
                { field: "price", title: "Đơn giá", width: "120px", template: "#= price ? '<span class=\"currency\">' + kendo.toString(price, 'n0') + ' VNĐ</span>' : '' #" },
                { field: "taxRate", title: "Thuế suất (%)", width: "100px", template: "#= taxRate ? '<span class=\"number\">' + kendo.toString(taxRate, 'n1') + '%</span>' : '' #" },
                { field: "lossRate", title: "Tỷ lệ hao hụt (%)", width: "120px", template: "#= lossRate ? '<span class=\"number\">' + kendo.toString(lossRate, 'n1') + '%</span>' : '' #" },
                { field: "processingFee", title: "Phí gia công", width: "120px", template: "#= processingFee ? '<span class=\"currency\">' + kendo.toString(processingFee, 'n0') + ' VNĐ</span>' : '' #" },
                { field: "profitMargin", title: "Tỷ lệ lợi nhuận (%)", width: "130px", template: "#= profitMargin ? '<span class=\"number\">' + kendo.toString(profitMargin, 'n1') + '%</span>' : '' #" },
                {
                    title: "Thành tiền",
                    width: "150px",
                    template: "#= '<span class=\"currency\">' + kendo.toString((quantity || 0) * (price || 0), 'n0') + ' VNĐ</span>' #"
                },
                { field: "note", title: "Ghi chú", width: "200px" }
            ]
        });
    }

    function InitKendoToolBar() {
        // Search button click handler
        $("#search").click(async function (e) {
            var grid = $(gridId).data("kendoGrid");
            grid.dataSource.filter({});
        });

        // Export Excel button click handler
        $("#exportExcel").click(async function (e) {
            ExportExcel();
        });
        // Initialize customer dropdown with Kendo DropDownList
        $("#customerId").kendoDropDownList({
            dataTextField: "text",
            dataValueField: "value",
            optionLabel: "-- Chọn khách hàng --",
            template: function (dataItem) {
                if (!dataItem || !dataItem.text) {
                    return "N/A";
                }
                return dataItem.text;
            },
            valueTemplate: function (dataItem) {
                if (!dataItem || !dataItem.text) {
                    return "-- Chọn khách hàng --";
                }
                return dataItem.text;
            },
            dataSource: {
                transport: {
                    read: {
                        url: "/Common/GetDataOptionsDropdown",
                        data: { type: "Customer" }
                    }
                },
                schema: {
                    parse: function (response) {
                        if (response && response.isSuccess && response.data) {
                            return response.data.filter(function (item) {
                                return item && item.text && item.value !== undefined;
                            });
                        }
                        return [];
                    }
                },

            }
        });
        // Initialize status dropdown
        $("#status").kendoDropDownList({
            dataTextField: "text",
            dataValueField: "data",
            optionLabel: "-- Chọn trạng thái --",
            template: function (dataItem) {
                if (!dataItem || !dataItem.text) {
                    return "N/A";
                }
                return dataItem.text;
            },
            valueTemplate: function (dataItem) {
                if (!dataItem || !dataItem.text) {
                    return "-- Chọn trạng thái --";
                }
                return dataItem.text;
            },
            dataSource: {
                transport: {
                    read: {
                        url: "/Common/GetDataOptionsDropdown",
                        data: { type: "POStatus" }
                    }
                },
                schema: {
                    parse: function (response) {
                        if (response && response.isSuccess && response.data) {
                            return response.data.filter(function (item) {
                                return item && item.text && item.data !== undefined;
                            });
                        }
                        return [];
                    }
                }
            }
        });

        // Create button click handler
        $("#create").on('click', function () {
            renderCreateOrEditForm();
        });

        // Set default date range to last 1 month
        var today = new Date();
        var oneMonthAgo = new Date();
        oneMonthAgo.setMonth(today.getMonth() - 1);

        // Format dates for input fields (YYYY-MM-DD)
        var todayStr = today.getFullYear() + '-' +
            String(today.getMonth() + 1).padStart(2, '0') + '-' +
            String(today.getDate()).padStart(2, '0');
        var oneMonthAgoStr = oneMonthAgo.getFullYear() + '-' +
            String(oneMonthAgo.getMonth() + 1).padStart(2, '0') + '-' +
            String(oneMonthAgo.getDate()).padStart(2, '0');

        // Set default values for date inputs
        $("#dateFrom").val(oneMonthAgoStr);
        $("#dateTo").val(todayStr);
    }
</script>

<script type="text/javascript">
    InitGrid();
    InitKendoToolBar();
    $(document).ready(function () {
        $(window).trigger("resize");

        // Auto load data with default filter (last 1 month)
        setTimeout(function () {
            var grid = $(gridId).data("kendoGrid");
            if (grid) {
                grid.dataSource.read();
            }
        }, 500);
    });
</script>

<style>
    .k-form-buttons {
        justify-content: flex-end;
    }

    /* Purchase Order Toolbar Styles */
    .purchase-order-toolbar {
        background: #f8f9fa;
        border: 1px solid #e9ecef;
        border-radius: 8px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        width: 100%;
        box-sizing: border-box;
    }

    /* Override any global label styles */
    .purchase-order-toolbar label,
    .purchase-order-toolbar .filter-label {
        text-align: left !important;
        justify-content: flex-start !important;
        align-items: flex-start !important;
    }

    .toolbar-filters {
        display: flex;
        flex-wrap: wrap;
        gap: 16px;
        align-items: flex-end;
        margin-bottom: 16px;
        width: 100%;
    }

    .filter-group {
        display: flex;
        flex-direction: column;
        min-width: 200px;
        flex: 1 1 200px;
        max-width: 280px;
        margin-right: 8px;
        align-items: flex-start;
    }

    .filter-group:last-child {
        margin-right: 0;
    }

    .filter-group.action-group {
        min-width: 80px;
        flex: 0 0 80px;
        max-width: 80px;
    }

    .filter-label {
        font-weight: 600;
        color: #495057;
        margin-bottom: 6px;
        font-size: 13px;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        text-align: left !important;
        display: block;
        width: 100%;
    }

    .filter-input {
        position: relative;
        width: 100%;
    }

    .filter-input input[type="text"],
    .filter-input input[type="date"],
    .filter-input select {
        width: 100% !important;
        height: 42px !important;
        padding: 10px 12px;
        border: 1px solid #ced4da;
        border-radius: 6px;
        font-size: 14px;
        transition: all 0.2s ease;
        background: white;
        box-sizing: border-box;
        line-height: 1.4;
    }

    /* Force Kendo DropDownList to use full width and height */
    .filter-input .k-dropdown,
    .filter-input .k-dropdownlist {
        width: 100% !important;
        height: 42px !important;
    }

    .filter-input .k-dropdown .k-dropdown-wrap,
    .filter-input .k-dropdownlist .k-dropdown-wrap {
        width: 100% !important;
        height: 42px !important;
        box-sizing: border-box;
    }

    .filter-input .k-dropdown .k-input,
    .filter-input .k-dropdownlist .k-input {
        height: 40px !important;
        line-height: 40px !important;
        padding: 0 12px !important;
    }

    .filter-input input[type="text"]:focus,
    .filter-input input[type="date"]:focus,
    .filter-input select:focus {
        border-color: #007bff;
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
        outline: none;
    }

    /* Toolbar Actions */
    .toolbar-actions {
        display: flex;
        gap: 12px;
        align-items: center;
        flex-wrap: wrap;
    }

    /* Button Styles */
    .btn-search,
    .btn-create,
    .btn-export {
        display: inline-flex;
        align-items: center;
        gap: 8px;
        padding: 10px 16px;
        border: none;
        border-radius: 6px;
        font-size: 14px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s ease;
        text-decoration: none;
        white-space: nowrap;
    }

    .btn-search {
        background: #007bff;
        color: white;
        padding: 10px 12px;
        min-width: 44px;
    }

    .btn-search:hover {
        background: #0056b3;
        transform: translateY(-1px);
    }

    .btn-create {
        background: #28a745;
        color: white;
    }

    .btn-create:hover {
        background: #1e7e34;
        transform: translateY(-1px);
    }

    .btn-export {
        background: #17a2b8;
        color: white;
    }

    .btn-export:hover {
        background: #117a8b;
        transform: translateY(-1px);
    }

    /* Action Buttons in Grid */
    .action-buttons {
        display: flex;
        gap: 4px;
        align-items: center;
        justify-content: center;
    }

    .btn-action {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        width: 32px;
        height: 32px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: all 0.2s ease;
        font-size: 14px;
    }

    .btn-edit {
        background: #ffc107;
        color: #212529;
    }

    .btn-edit:hover {
        background: #e0a800;
        transform: scale(1.1);
    }

    .btn-delete {
        background: #dc3545;
        color: white;
    }

    .btn-delete:hover {
        background: #c82333;
        transform: scale(1.1);
    }

    .btn-invoice {
        background: #6c757d;
        color: white;
    }

    .btn-invoice:hover {
        background: #545b62;
        transform: scale(1.1);
    }

    /* Status Badges */
    .badge {
        display: inline-block;
        padding: 4px 8px;
        font-size: 12px;
        font-weight: 500;
        border-radius: 4px;
        text-align: center;
        white-space: nowrap;
    }

    .badge-secondary {
        background-color: #6c757d;
        color: white;
    }

    .badge-warning {
        background-color: #ffc107;
        color: #212529;
    }

    .badge-success {
        background-color: #28a745;
        color: white;
    }

    .badge-info {
        background-color: #17a2b8;
        color: white;
    }

    .badge-danger {
        background-color: #dc3545;
        color: white;
    }

    /* Currency and Number Formatting */
    .currency {
        font-weight: 600;
        color: #28a745;
    }

    .number {
        font-weight: 500;
        color: #495057;
    }

    /* Dropdown Menu Styling */
    .dropdown-menu {
        border: 1px solid #e9ecef;
        border-radius: 6px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        min-width: 160px;
    }

    .dropdown-item {
        padding: 8px 16px;
        font-size: 14px;
        display: flex;
        align-items: center;
    }

    .dropdown-item:hover {
        background-color: #f8f9fa;
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .toolbar-filters {
            flex-direction: column;
            gap: 12px;
        }

        .filter-group {
            max-width: 100%;
            margin-right: 0;
        }

        .toolbar-actions {
            justify-content: center;
            margin-top: 16px;
        }

        .action-buttons {
            flex-direction: column;
            gap: 2px;
        }
    }

    /* Detail Grid Styling */
    .k-detail-cell .k-grid {
        border: 1px solid #e9ecef;
        border-radius: 4px;
        margin: 10px;
    }

    .k-detail-cell .k-grid-header {
        background: #f8f9fa;
    }

    /* Purchase Order Detail Modal */
    .purchase-order-detail {
        padding: 20px;
    }

    .purchase-order-detail p {
        margin-bottom: 8px;
    }

    .purchase-order-detail hr {
        margin: 20px 0;
        border-color: #e9ecef;
    }
</style>
